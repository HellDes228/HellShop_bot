from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import helldb
from pyqiwip2p import QiwiP2P
import random

fdshfdshfshdf = "https://socweb.net/api/v2?action=services&key=GH6FF9tTDThb5GgbThTQmnJXVRA6XfU3xOWvQS4GGIVVKVnqjU7aFguvnHiq"
BotDB = helldb('hellshopdb.db')
storage = MemoryStorage()
bot = Bot(token="5935502269:AAGXliqwbr4eOKlhHTzjxHQ2VPtkC4MIkck")
dp = Dispatcher(bot, storage=storage)
p2p = QiwiP2P(auth_key='eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6ImxoOGdhbC0wMCIsInVzZXJfaWQiOiI3OTg0MTI3NDc3NSIsInNlY3JldCI6IjEzYjcyMGNhOGFlZDNiZTkxMGFjOWIzYWViMjQ3NzBlM2ZkM2E1Y2NkNTNmYjBjYTE4YzZlN2VmZmZlMjIzOTIifX0=')
# ======================================–ê–¥–º–∏–Ω –ß–∞—Å—Ç—å======================================


@dp.message_handler(commands=['sendall'], state='*')
async def mailing(message: types.Message):
    if message.from_user.id == 934479352:
        text = message.text[9:]
        users = BotDB.get_user()
        for row in users:
            try:
                await bot.send_message(row[0], text)
                if int(row[1]) != 1:
                    BotDB.set_active(row[0], 1)
            except:
                BotDB.set_active(row[0], 0)
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')


# ======================================–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ß–∞—Å—Ç—å======================================


@dp.message_handler(commands=['start'], state='*')
async def command_start(message: types.Message, state: FSMContext):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)
    await bot.send_message(message.from_user.id, """üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ Hell Shop.
üõí –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.</b>""", reply_markup=kb_client, parse_mode='html')
    await state.finish()


# Products
@dp.message_handler(Text(equals='üõí –¢–æ–≤–∞—Ä—ã', ignore_case=True), state='*')
async def command_products(message: types.Message, state: FSMContext):
    await message.answer('üõç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>', reply_markup=om, parse_mode='html')
    await state.finish()


# Telegram
@dp.callback_query_handler(lambda c: c.data == 'tg_premiumkb', state='*')
async def tg_inline_item_menu(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    balance = BotDB.user_balance(chat_id)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text=f"""üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚ÇΩ
üè∑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>""", reply_markup=inline_item_tg(), parse_mode='html')


@dp.callback_query_handler(text='cancel', state='*')
async def cancel_products(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('üõç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>', parse_mode='html')
    await callback_query.message.edit_reply_markup(reply_markup=om)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tg'), state='*')
async def process_callback_tg(callback_query: types.CallbackQuery):
    code = callback_query.data
    res_str = code.replace('tg_', '')
    x = res_str
    products = BotDB.get_item_tg(x)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text=f"""<b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: </b>{products[1]}
<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b>üåü {products[2]}
<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ: </b>{products[3]}
<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: </b>{products[4]}‚ÇΩ
<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: </b>{products[5]} —à—Ç""", reply_markup=buy_item_tg(products[0]), parse_mode='html')


@dp.callback_query_handler(text='canceltg', state='*')
async def cancel_products_tg(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    balance = BotDB.user_balance(chat_id)
    await callback_query.message.edit_text(f"""üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚ÇΩ
üè∑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>""", parse_mode='html')
    await callback_query.message.edit_reply_markup(reply_markup=inline_item_tg())


# Vpn
@dp.callback_query_handler(lambda c: c.data == 'vpnkb', state='*')
async def vpn_inline_item_menu(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    balance = BotDB.user_balance(chat_id)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text=f"""üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚ÇΩ
üè∑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>""", reply_markup=inline_item_vpn(), parse_mode='html')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('vpn'), state='*')
async def process_callback_vpn(callback_query: types.CallbackQuery, state: FSMContext):
    code = callback_query.data
    res_str = code.replace('vpn_', '')
    x = res_str
    products = BotDB.get_item_vpn(x)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, text=f"""<b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: </b>{products[1]}
<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b>ü©∏ {products[2]}
<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ: </b>{products[3]}
<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: </b>{products[4]}‚ÇΩ
<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: </b>{products[5]} —à—Ç""", reply_markup=buy_item_vpn(products[0]), parse_mode='html')
    async with state.proxy() as data:
        data['productsvpn'] = products


@dp.callback_query_handler(text='cancelvpn', state='*')
async def cancel_products_vpn(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    balance = BotDB.user_balance(chat_id)
    await callback_query.message.edit_text(f"""üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚ÇΩ
üè∑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>""", parse_mode='html')
    await callback_query.message.edit_reply_markup(reply_markup=inline_item_vpn())


class purchase(StatesGroup):
    input_amount = State()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('buy_item_vpn'), state='*')
async def purchase_vpn(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        products = data['productsvpn']
    chat_id = callback_query.from_user.id
    balance = BotDB.user_balance(chat_id)
    await bot.send_message(callback_query.from_user.id, f"""<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.</b>
‚ñ∂Ô∏è –û—Ç 1 –¥–æ {products[5]}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –¢–æ–≤–∞—Ä: {products[1]}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ""", parse_mode='html')
    await state.set_state(purchase.input_amount)


def number(_str):
    try:
        int(_str)
        return True
    except ValueError:
        return False


@dp.message_handler(state=purchase.input_amount)
async def check_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        products = data['productsvpn']
    chat_id = message.from_user.id
    balance = BotDB.user_balance(chat_id)
    productsid = products[0]
    cheque = random.randint(1000000000, 9999999999)
    if number(message.text):
        mes = int(message.text)
        if mes <= products[5]:
            if mes > 0:
                if balance >= mes * products[4]:
                    await bot.send_message(chat_id, f"""‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã).</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìÉ –ß–µ–∫: #{cheque}
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {products[1]}
üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {mes}
üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {products[4] * mes}‚ÇΩ
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.full_name} ({chat_id})""", parse_mode='html')
                    BotDB.set_item_vpn(productsid, products[5]-mes)
                    BotDB.set_balance(chat_id, balance-(products[4]*mes))
                    await state.finish()
                else:
                    await bot.send_message(chat_id, f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
‚ñ∂Ô∏è –û—Ç 1 –¥–æ {products[5]}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –¢–æ–≤–∞—Ä: {products[1]}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ""", parse_mode='html')
            else:
                await bot.send_message(chat_id, f"""‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
‚ñ∂Ô∏è –û—Ç 1 –¥–æ {products[5]}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –¢–æ–≤–∞—Ä: {products[1]}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ""", parse_mode='html')
        else:
            await bot.send_message(chat_id, f"""‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
‚ñ∂Ô∏è –û—Ç 1 –¥–æ {products[5]}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –¢–æ–≤–∞—Ä: {products[1]}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ""", parse_mode='html')
    else:
        await bot.send_message(chat_id, f"""‚ùå <b>–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
‚ñ∂Ô∏è –û—Ç 1 –¥–æ {products[5]}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè∑ –¢–æ–≤–∞—Ä: {products[1]}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ""", parse_mode='html')


# Profile
@dp.message_handler(Text(equals='üë§ –ü—Ä–æ—Ñ–∏–ª—å', ignore_case=True), state='*')
async def command_profile(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    balance = BotDB.user_balance(chat_id)
    await message.answer(f"""üîë <b>ID:</b> {message.from_user.id}
üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚ÇΩ""", reply_markup=profile_menu(), parse_mode='html')
    await state.finish()


# Replenishment
class replenishment(StatesGroup):
    entering_amount = State()
    check_payment = State()


@dp.callback_query_handler(text='balance_menu')
async def imput_amount(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=rt_cancel(), parse_mode='html')
    await state.set_state(replenishment.entering_amount)


@dp.callback_query_handler(text='cancelrt', state='*')
async def replenishment_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    balance = BotDB.user_balance(chat_id)
    await callback_query.message.edit_text(f"""üîë <b>ID:</b> {callback_query.from_user.id}
üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance}‚ÇΩ""", parse_mode='html')
    await callback_query.message.edit_reply_markup(reply_markup=profile_menu())
    await state.finish()


def is_number(_str):
    try:
        float(_str)
        return True
    except ValueError:
        return False


@dp.message_handler(state=replenishment.entering_amount)
async def replenishment_message(message: types.Message):
    if message.chat.type == "private":
        if is_number(message.text):
            message_balance = float(message.text)
            if message_balance >= 10:
                comment = str(message.from_user.id) + "_" + str(random.randint(1000, 9999))
                bill = p2p.bill(amount=message_balance, lifetime=15, comment=comment)
                BotDB.add_check(message.from_user.id, message_balance, bill.bill_id)
                await bot.send_message(message.from_user.id, f"""<b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç.</b>
                
üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.""", reply_markup=rt_check(url=bill.pay_url, bill=bill.bill_id), parse_mode='html')
                await replenishment.next()
            else:
                await bot.send_message(message.from_user.id, """‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.</b>
‚ñ∂Ô∏è C—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 10‚ÇΩ.
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.""", parse_mode='html')
        else:
            await bot.send_message(message.from_user.id, """‚ùå <b>–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤""", parse_mode='html')


@dp.callback_query_handler(text_contains="check_", state=replenishment.check_payment)
async def replenishment_check(callback: types.CallbackQuery, state: FSMContext):
    bill = str(callback.data[6:])
    info = BotDB.get_check(bill)
    if info != False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            user_balance = BotDB.user_balance(callback.from_user.id)
            bal = float(info[1])
            BotDB.set_balance(callback.from_user.id, user_balance+bal)
            await bot.send_message(callback.from_user.id, "‚úÖ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>", parse_mode='html')
        else:
            await callback.answer("‚ùå –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω!", show_alert=True)
    else:
        await callback.answer("üö´ –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await state.finish()


# Other
@dp.message_handler(Text(equals='üí≠ –ò–Ω—Ñ–æ', ignore_case=True), state='*')
async def command_info(message: types.Message, state: FSMContext):
    await message.answer('‚ùó <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', reply_markup=urlkb, parse_mode='html')
    await state.finish()


@dp.message_handler(Text(equals='üìú –ü—Ä–∞–≤–∏–ª–∞', ignore_case=True), state='*')
async def command_rules(message: types.Message, state: FSMContext):
    await message.answer("""<b>1.–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>

1.1 –ó–∞–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏:
üíî –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫ –∫—É–ø–ª–µ–Ω–Ω–æ–º—É –≤–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç—É.
üíî –ë–æ—Ç –≤—ã–¥–∞–ª –ø—É—Å—Ç—É—é —Å—Å—ã–ª–∫—É.
–í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–∞–º–µ–Ω—ã –Ω–µ—Ç!

1.2 –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –∑–∞–º–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:
üíî –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –î–û –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç.
üíî –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.
üíî –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã - 20 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.

2. <b>–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.</b>

2.1 –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
üíî –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ —Ä–∞–∑–¥–∞—ë–º.
üíî –í–µ—Ä–Ω—É—Ç—å, –æ–±–º–µ–Ω—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –≤–∞–º –∫–∞–∫-—Ç–æ –Ω–µ –ø–æ–¥–æ—à–µ–ª, –Ω–µ –∑–∞—à–µ–ª –∏ –ø—Ä–æ—á–µ–µ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
üíî –í —Å–ª—É—á–∞–µ –æ–±–º–∞–Ω–∞ —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ –Ω–µ–≤–∞–ª–∏–¥—É - –æ—Ç–∫–∞–∑ –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –∑–∞–º–µ–Ω–µ. –ò—Ç–æ–≥ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.
üíî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.
üíî –¢–∞–∫–∂–µ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è. –ó–∞ –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç.
üíî –°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –í–°–ï–ú–ò –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞.

2.2 –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:

üíî –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–µ—Å—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞.
üíî –ú—ã –≤—Å–µ–≥–¥–∞ –∏–¥—ë–º –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –∏ –ø–æ–º–æ–≥–∞–µ–º —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.
üíî –ü—Ä–∞–≤–∏–ª–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.


‚ùóÔ∏è<b>–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏‚ùó</b>""", parse_mode="html")
    await state.finish()


@dp.message_handler()
async def invalid_command(message: types.Message):
    await bot.send_message(message.from_user.id, """‚ô¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.
‚ñ∂Ô∏è–í–≤–µ–¥–∏—Ç–µ /start""")


# ======================================–ö–Ω–æ–ø–∫–∏======================================

kb_client = ReplyKeyboardMarkup(resize_keyboard=True)
b1 = KeyboardButton('üõí –¢–æ–≤–∞—Ä—ã')
b2 = KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
b3 = KeyboardButton('üìú –ü—Ä–∞–≤–∏–ª–∞')
b4 = KeyboardButton('üí≠ –ò–Ω—Ñ–æ')
kb_client.add(b1).insert(b2).add(b3).insert(b4)

urlkb = InlineKeyboardMarkup(row_width=2)
urlb1 = InlineKeyboardButton(text='‚öô –ê–¥–º–∏–Ω/–†–µ–∫–ª–∞–º–∞', url='https://t.me/smurf00')
urlb2 = InlineKeyboardButton(text='üÜò –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/smurf00')
urlb3 = InlineKeyboardButton(text='‚ù§ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã', url='https://t.me/testchathell')
urlkb.add(urlb1).insert(urlb2).add(urlb3)

om = InlineKeyboardMarkup(row_width=2)
om1 = InlineKeyboardButton(text='üåü Tg Premium', callback_data='tg_premiumkb')
om2 = InlineKeyboardButton(text='ü©∏ VPN', callback_data='vpnkb')
om3 = InlineKeyboardButton(text='üìï –°—Ö–µ–º—ã', callback_data='sxem')
om4 = InlineKeyboardButton(text='‚úâ –ü–æ—á—Ç—ã', callback_data='mail')
om.add(om1).insert(om2).add(om3).insert(om4)


# Telegram
def inline_item_tg():
    tg = InlineKeyboardMarkup(row_width=1)
    tgitem = BotDB.get_inline_item_tg()
    for products in tgitem:
        btn_text = f'{products[1]} | {products[2]}‚ÇΩ | {products[3]} —à—Ç'
        tg1 = InlineKeyboardButton(text=btn_text, callback_data=f'tg_{products[0]}')
        tg.add(tg1)
    cn = InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='cancel')
    tg.add(cn)
    return tg


def buy_item_tg(products):
    buy = InlineKeyboardMarkup(row_width=1)
    buy1 = InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å', callback_data=f'buy_item_tg{products}')
    cn1 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='canceltg')
    buy.add(buy1).add(cn1)
    return buy


# Vpn
def inline_item_vpn():
    vpn = InlineKeyboardMarkup(row_width=1)
    vpnitem = BotDB.get_inline_item_vpn()
    for products in vpnitem:
        btn_text = f'{products[1]} | {products[2]}‚ÇΩ | {products[3]} —à—Ç'
        vpn1 = InlineKeyboardButton(text=btn_text, callback_data=f'vpn_{products[0]}')
        vpn.add(vpn1)
    cn = InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='cancel')
    vpn.add(cn)
    return vpn


def buy_item_vpn(products):
    buy = InlineKeyboardMarkup(row_width=1)
    buy1 = InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å', callback_data=f'buy_item_vpn_{products}')
    buy.add(buy1)
    cn1 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='cancelvpn')
    buy.add(cn1)
    return buy


# Profile
def profile_menu():
    tm = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    tm1 = InlineKeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='balance_menu')
    tm2 = InlineKeyboardButton(text='üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data='history')
    tm.add(tm1).insert(tm2)
    return tm


def rt_cancel():
    rt = InlineKeyboardMarkup(row_width=1)
    rt1 = InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©', callback_data='cancelrt')
    rt.add(rt1)
    return rt


def rt_check(isUrl=True, url="", bill=""):
    qiwiMenu = InlineKeyboardMarkup(row_width=1)
    if isUrl:
        btnUrlQIWI = InlineKeyboardButton(text="üî∑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)
        qiwiMenu.insert(btnUrlQIWI)
    btnCheckQIWI = InlineKeyboardButton(text="üåÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_"+bill)
    qiwiMenu.insert(btnCheckQIWI)
    return qiwiMenu


# ======================================–î—Ä—É–≥–æ–µ======================================


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)